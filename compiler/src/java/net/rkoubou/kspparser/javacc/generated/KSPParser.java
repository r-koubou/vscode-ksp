/* KSPParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. KSPParser.java */
package net.rkoubou.kspparser.javacc.generated;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigInteger;

import net.rkoubou.kspparser.analyzer.AnalyzeErrorCounter;
import net.rkoubou.kspparser.analyzer.AnalyzerConstants;
import net.rkoubou.kspparser.analyzer.KSPLanguageLimitations;
import net.rkoubou.kspparser.analyzer.MessageManager;
import net.rkoubou.kspparser.analyzer.SymbolDefinition;
import net.rkoubou.kspparser.analyzer.SymbolDefinition.SymbolType;
import net.rkoubou.kspparser.analyzer.Variable;

public class KSPParser implements/*@bgen(jjtree)*/ KSPParserTreeConstants,AnalyzerConstants, KSPParserConstants {/*@bgen(jjtree)*/
  protected JJTKSPParserState jjtree = new JJTKSPParserState();/** ルートの構文木 */
    ASTRootNode rootNode;

    /** パース対象のファイル */
    File file;

    /** コールバック・ユーザー関数の行数オーバーフローのしきい値 */
    int lineOverflowLimit = Integer.MAX_VALUE - 1;

    /** パース中のコールバック・ユーザー関数の行数カウンタ */
    int currentScopeLineCounter = 0;

    /**
     * Ctor.
     */
    public KSPParser( File file ) throws IOException
    {
        this( new BufferedReader( new InputStreamReader( new FileInputStream( file ), "UTF-8" ) ) );
        this.file = file.getAbsoluteFile();
   }

    /**
     * パース対象ファイルのFileを取得する
     */
    public File getFile()
    {
        return file;
    }

    /**
     * 構文解析
     */
    public ASTRootNode analyzeSyntax() throws Exception
    {
        ASTRootNode rootNode = null;
        try
        {
            rootNode = KSPScript();
        }
        catch( Throwable e )
        {
            e.printStackTrace();
        }
        finally
        {
            // javacc が生成するトークン解析器が使用した入力ストリームのクローズ
            // 構文解析時に文法エラーがあった場合にクローズせずに抜けるっぽく
            // ファイルハンドルを掴みっ放しになってしまい他のアプリケーションからアクセスできなくなるので対処
            try{ jj_input_stream.inputStream.close(); } catch( Throwable e ){}
        }

        return rootNode;

    }

    /**
     * 指定された値をシンボル情報に設定
     */
    void applyToSymbol( Token token, SimpleNode dest, int type, SymbolDefinition.SymbolType symbolType )
    {
        if( token.image != null )
        {
            dest.symbol.setName( token.image );
        }
        dest.symbol.position.copy( token );
        dest.symbol.type        = type;
        dest.symbol.symbolType  = symbolType;
    }

    /**
     * リテラルをシンボル情報に設定
     */
    void applyIntLiteral( Token token, SimpleNode dest )
    {
        String v = token.image.toLowerCase();
        if( v.startsWith( "0" ) && v.endsWith( "h" ) )
        {
            // KSP 16進数 → Java 16進数
            // 0x80000000以上の値の扱いが特殊なので一迂回。
            // http://qiita.com/oboenikui/items/cfd396b08f20798f0b3e
            BigInteger bi = new BigInteger( v.substring( 1, v.length() - 1 ), 16 );
            dest.symbol.value = bi.intValue();
        }
        else
        {
            // 10進数
            // KSPは signed 32bit int
            BigInteger bi = new BigInteger( v );    // KONTAKTと同様に、何桁になっても最後は下位32bitに切り詰める
            dest.symbol.value = bi.intValue();
        }
        dest.symbol.type      = TYPE_INT;
        applyAllLiteral( token, dest );
    }

    /**
     * リテラルをシンボル情報に設定
     */
    void applyRealLiteral( Token token, SimpleNode dest )
    {
        dest.symbol.value = Double.valueOf( token.image );
        dest.symbol.type  = TYPE_REAL;
        applyAllLiteral( token, dest );
    }

    /**
     * リテラルをシンボル情報に設定
     */
    void applyStringLiteral( Token token, SimpleNode dest )
    {
        dest.symbol.value = token.image;
        dest.symbol.type  = TYPE_STRING;
        applyAllLiteral( token, dest );
    }

    /**
     * リテラルをシンボル情報に設定(型共通)
     */
    void applyAllLiteral( Token token, SimpleNode dest )
    {
        dest.jjtSetValue( dest.symbol.value );
        dest.symbol.setName( "" );
        dest.symbol.accessFlag   = ACCESS_ATTR_CONST;
        dest.symbol.position.copy( token );
        dest.symbol.symbolType   = SymbolDefinition.SymbolType.Literal;
    }

    /**
     * 構文解析中にエラーが出た場合の復帰先までトークンを読み飛ばす
     */
    void errorSkipTo( ParseException e )
    {
        MessageManager.println( e );
        AnalyzeErrorCounter.e();
        //e.printStackTrace();
        Token t = null;
        do
        {
            try
            {
                t = null; // getNextTokenコール時、例外発生時の無限ループ対策
                t = getNextToken();
            }
            catch( Throwable ee )
            {}
        }
        while( t != null &&
               t.kind != EOF &&
               t.kind != EOL &&
               t.kind != MULTI_LINE_DELIMITER &&
               t.kind != RPAREN &&
               t.kind != RBRACKET
        );
    }

//------------------------------------------------------------------------------
// 文法定義ここから
//------------------------------------------------------------------------------

//##############################################################################
// MEMO: Block(), Expression() 直前のトークンに (<MULTI_LINE_DELIMITER>)* 指定はいらない。
// 複数行に跨ぐ式を成立させるため、式中は演算子として定義している。
//##############################################################################

//
// プログラム全体
//
  final public ASTRootNode KSPScript() throws ParseException {/*@bgen(jjtree) RootNode */
  ASTRootNode jjtn000 = new ASTRootNode(this, JJTROOTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:
          case MULTI_LINE_DELIMITER:
          case ON:
          case FUNCTION:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ON:{
            CallbackDeclaration();
            break;
            }
          case FUNCTION:{
            UserFunctionDeclaration();
            break;
            }
          case EOL:{
            jj_consume_token(EOL);
            break;
            }
          case MULTI_LINE_DELIMITER:{
            jj_consume_token(MULTI_LINE_DELIMITER);
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
errorSkipTo( e );
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

//
// 変数の定義
//
  final public Token Variable() throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE_INT:{
      var = jj_consume_token(VARIABLE_INT);
      break;
      }
    case VARIABLE_INT_ARRAY:{
      var = jj_consume_token(VARIABLE_INT_ARRAY);
      break;
      }
    case VARIABLE_REAL:{
      var = jj_consume_token(VARIABLE_REAL);
      break;
      }
    case VARIABLE_REAL_ARRAY:{
      var = jj_consume_token(VARIABLE_REAL_ARRAY);
      break;
      }
    case VARIABLE_STRING:{
      var = jj_consume_token(VARIABLE_STRING);
      break;
      }
    case VARIABLE_STRING_ARRAY:{
      var = jj_consume_token(VARIABLE_STRING_ARRAY);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

//
// 変数宣言
//
  final public void VariableDeclaration() throws ParseException {/*@bgen(jjtree) VariableDeclaration */
    ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(this, JJTVARIABLEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    Token symbol;
    Token uiType = null;
    try {
      symbol = jj_consume_token(DECLARE);
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONST:
      case POLYPHONIC:
      case IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONST:{
          jj_consume_token(CONST);
jjtn000.symbol.accessFlag = ACCESS_ATTR_CONST;
          break;
          }
        case POLYPHONIC:{
          jj_consume_token(POLYPHONIC);
jjtn000.symbol.accessFlag = ACCESS_ATTR_POLY;
          break;
          }
        case IDENTIFIER:{
          uiType = jj_consume_token(IDENTIFIER);
jjtn000.symbol.accessFlag = ACCESS_ATTR_UI;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      name = Variable();
      if (jj_2_3(2)) {
        VariableInitializer();
      } else {
        ;
      }
jjtn000.symbol.setName( name.image );
            jjtn000.symbol.type = Variable.getKSPTypeFromVariableName( name.image );
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if( uiType != null )
        {
            jjtn000.symbol.uiTypeName = uiType.image;
        }
        jjtn000.symbol.position.copy( symbol );
        jjtn000.symbol.symbolType = SymbolDefinition.SymbolType.Variable;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// 初期値代入
//
  final public void VariableInitializer() throws ParseException {/*@bgen(jjtree) VariableInitializer */
  ASTVariableInitializer jjtn000 = new ASTVariableInitializer(this, JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ArrayInitializer();
        break;
        }
      case ASSIGN:
      case LPAREN:{
        PrimitiveInititalizer();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

//
// プリミティブ型変数初期値代入
//
  final public void PrimitiveInititalizer() throws ParseException {/*@bgen(jjtree) PrimitiveInititalizer */
  ASTPrimitiveInititalizer jjtn000 = new ASTPrimitiveInititalizer(this, JJTPRIMITIVEINITITALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        Expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.hasAssign = true;
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        Expression();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MULTI_LINE_DELIMITER:{
              ;
              break;
              }
            default:
              jj_la1[7] = jj_gen;
              break label_5;
            }
            jj_consume_token(MULTI_LINE_DELIMITER);
          }
          jj_consume_token(COMMA);
          Expression();
        }
        jj_consume_token(RPAREN);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.hasAssign = false;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// 配列変数初期値代入
//
  final public void ArrayInitializer() throws ParseException {/*@bgen(jjtree) ArrayInitializer */
    ASTArrayInitializer jjtn000 = new ASTArrayInitializer(this, JJTARRAYINITIALIZER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token assign = null;
    try {
      ArrayIndex();
      if (jj_2_4(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          assign = jj_consume_token(ASSIGN);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(LPAREN);
        Expression();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            break label_6;
          }
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MULTI_LINE_DELIMITER:{
              ;
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              break label_7;
            }
            jj_consume_token(MULTI_LINE_DELIMITER);
          }
          jj_consume_token(COMMA);
          Expression();
        }
        jj_consume_token(RPAREN);
      } else {
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.hasAssign = assign != null;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// コールバック本体
//
  final public void CallbackDeclaration() throws ParseException {/*@bgen(jjtree) CallbackDeclaration */
    ASTCallbackDeclaration jjtn000 = new ASTCallbackDeclaration(this, JJTCALLBACKDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token symbol;
    Token end;
    this.currentScopeLineCounter = 0;
    try {
      jj_consume_token(ON);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_8;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      symbol = jj_consume_token(IDENTIFIER);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_9;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        CallbackArgument();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(EOL);
this.currentScopeLineCounter++;
      Block();
      jj_consume_token(END);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_10;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      end = jj_consume_token(ON);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol.setName( symbol.image );
        jjtn000.symbol.position.copy( symbol );
        jjtn000.symbol.position.endLine   = end.endLine;
        jjtn000.symbol.position.endColumn = end.endColumn;
        jjtn000.symbol.symbolType = SymbolDefinition.SymbolType.Callback;
        if( this.currentScopeLineCounter >= KSPLanguageLimitations.OVERFLOW_LINES )
        {
            MessageManager.println(
                MessageManager.PROPERTY_WARNING_TOOMUCH_LINECOUNT,
                MessageManager.Level.WARNING,
                jjtn000.symbol,
                String.valueOf( jjtn000.symbol.position.lineCount() )
            );
        }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// コールバック・引数宣言
//
  final public void CallbackArgument() throws ParseException {
    jj_consume_token(LPAREN);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI_LINE_DELIMITER:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_11;
      }
      jj_consume_token(MULTI_LINE_DELIMITER);
    }
    CallbackArgumentList();
    jj_consume_token(RPAREN);
  }

//
// コールバック・引数リスト
//
  final public void CallbackArgumentList() throws ParseException {/*@bgen(jjtree) CallbackArgumentList */
    ASTCallbackArgumentList jjtn000 = new ASTCallbackArgumentList(this, JJTCALLBACKARGUMENTLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token arg1, argN ;
    try {
      arg1 = Variable();
jjtn000.args.add( arg1.image );
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        argN = Variable();
jjtn000.args.add( argN.image );
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// ユーザー定義関数本体
//
  final public void UserFunctionDeclaration() throws ParseException {/*@bgen(jjtree) UserFunctionDeclaration */
    ASTUserFunctionDeclaration jjtn000 = new ASTUserFunctionDeclaration(this, JJTUSERFUNCTIONDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token symbol;
    Token end;
    this.currentScopeLineCounter = 0;
    try {
      jj_consume_token(FUNCTION);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_13;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      symbol = jj_consume_token(IDENTIFIER);
      jj_consume_token(EOL);
this.currentScopeLineCounter++;
      Block();
      jj_consume_token(END);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_14;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      end = jj_consume_token(FUNCTION);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol.setName( symbol.image );
        jjtn000.symbol.position.copy( symbol );
        jjtn000.symbol.position.endLine   = end.endLine;
        jjtn000.symbol.position.endColumn = end.endColumn;
        jjtn000.symbol.symbolType = SymbolDefinition.SymbolType.UserFunction;
        if( this.currentScopeLineCounter >= KSPLanguageLimitations.OVERFLOW_LINES )
        {
            MessageManager.println(
                MessageManager.PROPERTY_WARNING_TOOMUCH_LINECOUNT,
                MessageManager.Level.WARNING,
                jjtn000.symbol,
                String.valueOf( jjtn000.symbol.position.lineCount() )
            );
        }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// コールバック本体 / ユーザー定義関数本体のスコープ本体
//
  final public void Block() throws ParseException {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        label_15:
        while (true) {
          if (jj_2_5(2)) {
            ;
          } else {
            break label_15;
          }
          BlockStatement();
        }
      } catch (ParseException e) {
errorSkipTo( e );
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// スコープ中の式
//
  final public void BlockStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECLARE:{
      VariableDeclaration();
      break;
      }
    case EOL:
    case MULTI_LINE_DELIMITER:
    case IF:
    case SELECT:
    case WHILE:
    case CALL:
    case PREPROCESSOR_SET_COND:
    case PREPROCESSOR_RESET_COND:
    case PREPROCESSOR_CODE_IF:
    case PREPROCESSOR_CODE_IF_NOT:
    case VARIABLE_INT:
    case VARIABLE_INT_ARRAY:
    case VARIABLE_REAL:
    case VARIABLE_REAL_ARRAY:
    case VARIABLE_STRING:
    case VARIABLE_STRING_ARRAY:
    case LPAREN:
    case IDENTIFIER:{
      Statement();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//
// 各種ステートメントの定義
//
  final public void Statement() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PREPROCESSOR_SET_COND:
      case PREPROCESSOR_RESET_COND:
      case PREPROCESSOR_CODE_IF:
      case PREPROCESSOR_CODE_IF_NOT:{
        PreProcessorStatement();
        break;
        }
      case VARIABLE_INT:
      case VARIABLE_INT_ARRAY:
      case VARIABLE_REAL:
      case VARIABLE_REAL_ARRAY:
      case VARIABLE_STRING:
      case VARIABLE_STRING_ARRAY:
      case LPAREN:
      case IDENTIFIER:{
        StatementExpression();
        break;
        }
      case IF:{
        IfStatement();
        break;
        }
      case SELECT:{
        SelectStatement();
        break;
        }
      case WHILE:{
        WhileStatement();
        break;
        }
      case CALL:{
        CallUserFunctionStatement();
        break;
        }
      case MULTI_LINE_DELIMITER:{
        jj_consume_token(MULTI_LINE_DELIMITER);
        break;
        }
      case EOL:{
        jj_consume_token(EOL);
this.currentScopeLineCounter++;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
errorSkipTo( e );
    }
  }

//
// プリプロセッサ
//
  final public void PreProcessorStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PREPROCESSOR_SET_COND:{
      PreProcessorDefine();
      break;
      }
    case PREPROCESSOR_RESET_COND:{
      PreProcessorUnDefine();
      break;
      }
    case PREPROCESSOR_CODE_IF:{
      PreProcessorIfDefined();
      break;
      }
    case PREPROCESSOR_CODE_IF_NOT:{
      PreProcessorIfUnDefined();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//
// プリプロセッサ：シンボル定義
//
  final public void PreProcessorDefine() throws ParseException {/*@bgen(jjtree) PreProcessorDefine */
    ASTPreProcessorDefine jjtn000 = new ASTPreProcessorDefine(this, JJTPREPROCESSORDEFINE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      jj_consume_token(PREPROCESSOR_SET_COND);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_16;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(LPAREN);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_17;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      symbol = jj_consume_token(IDENTIFIER);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_18;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(RPAREN);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol.setName( symbol.image );
        jjtn000.symbol.position.copy( symbol );
        jjtn000.symbol.symbolType   = SymbolDefinition.SymbolType.PreprocessorSymbol;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// プリプロセッサ：シンボル破棄
//
  final public void PreProcessorUnDefine() throws ParseException {/*@bgen(jjtree) PreProcessorUnDefine */
    ASTPreProcessorUnDefine jjtn000 = new ASTPreProcessorUnDefine(this, JJTPREPROCESSORUNDEFINE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      jj_consume_token(PREPROCESSOR_RESET_COND);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_19;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(LPAREN);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_20;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      symbol = jj_consume_token(IDENTIFIER);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_21;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(RPAREN);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol.setName( symbol.image );
        jjtn000.symbol.position.copy( symbol );
        jjtn000.symbol.symbolType   = SymbolDefinition.SymbolType.PreprocessorSymbol;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// プリプロセッサ：シンボル定義分岐(=ifdef)
//
  final public void PreProcessorIfDefined() throws ParseException {/*@bgen(jjtree) PreProcessorIfDefined */
    ASTPreProcessorIfDefined jjtn000 = new ASTPreProcessorIfDefined(this, JJTPREPROCESSORIFDEFINED);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      jj_consume_token(PREPROCESSOR_CODE_IF);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_22;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(LPAREN);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_23;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      symbol = jj_consume_token(IDENTIFIER);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_24;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(RPAREN);
      Block();
      jj_consume_token(PREPROCESSOR_CODE_END_IF);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol.setName( symbol.image );
        jjtn000.symbol.position.copy( symbol );
        jjtn000.symbol.symbolType   = SymbolDefinition.SymbolType.PreprocessorSymbol;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// プリプロセッサ：シンボル定義分岐(=ifndef)
//
  final public void PreProcessorIfUnDefined() throws ParseException {/*@bgen(jjtree) PreProcessorIfUnDefined */
    ASTPreProcessorIfUnDefined jjtn000 = new ASTPreProcessorIfUnDefined(this, JJTPREPROCESSORIFUNDEFINED);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      jj_consume_token(PREPROCESSOR_CODE_IF_NOT);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_25;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(LPAREN);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_26;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      symbol = jj_consume_token(IDENTIFIER);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_27;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(RPAREN);
      Block();
      jj_consume_token(PREPROCESSOR_CODE_END_IF);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol.setName( symbol.image );
        jjtn000.symbol.position.copy( symbol );
        jjtn000.symbol.symbolType   = SymbolDefinition.SymbolType.PreprocessorSymbol;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StatementExpression() throws ParseException {
    if (jj_2_6(3)) {
      Assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIABLE_INT:
      case VARIABLE_INT_ARRAY:
      case VARIABLE_REAL:
      case VARIABLE_REAL_ARRAY:
      case VARIABLE_STRING:
      case VARIABLE_STRING_ARRAY:
      case LPAREN:
      case IDENTIFIER:{
        PrimaryExpression();
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//
// if
//
  final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          break label_28;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Block();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        Block();
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(END);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_29;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(IF);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// select
//
  final public void SelectStatement() throws ParseException {/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(this, JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECT);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_30;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(LPAREN);
      Expression();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          break label_31;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(RPAREN);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_32;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      label_33:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:{
          ;
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          break label_33;
        }
      }
      label_34:
      while (true) {
        CaseStatement();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          ;
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          break label_34;
        }
      }
      jj_consume_token(END);
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_35;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(SELECT);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//
// case @select
//
  final public void CaseStatement() throws ParseException {/*@bgen(jjtree) CaseStatement */
  ASTCaseStatement jjtn000 = new ASTCaseStatement(this, JJTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CASE);
      label_36:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_36;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      CaseCondition();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TO:{
        jj_consume_token(TO);
        label_37:
        while (true) {
          if (jj_2_8(2)) {
            ;
          } else {
            break label_37;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        CaseCondition();
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      Block();
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_38;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CaseCondition() throws ParseException {/*@bgen(jjtree) CaseCondition */
  ASTCaseCondition jjtn000 = new ASTCaseCondition(this, JJTCASECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// while
//
  final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          break label_39;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Block();
      jj_consume_token(END);
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          break label_40;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      jj_consume_token(WHILE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// ユーザー定義関数呼び出し
//
  final public void CallUserFunctionStatement() throws ParseException {/*@bgen(jjtree) CallUserFunctionStatement */
    ASTCallUserFunctionStatement jjtn000 = new ASTCallUserFunctionStatement(this, JJTCALLUSERFUNCTIONSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      jj_consume_token(CALL);
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          ;
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          break label_41;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      symbol = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol.setName( symbol.image );
        jjtn000.symbol.position.copy( symbol );
        jjtn000.symbol.symbolType = SymbolDefinition.SymbolType.UserFunction;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//------------------------------------------------------------------------------
// 式
//------------------------------------------------------------------------------
  final public void Expression() throws ParseException {
    ConditionalExpression();
  }

//
// 代入式
//
  final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
    ASTAssignment jjtn000 = new ASTAssignment(this, JJTASSIGNMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token token;
    try {
      RefVariable();
      token = jj_consume_token(ASSIGN);
      Expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
applyToSymbol( token, jjtn000, TYPE_VOID, SymbolType.Expression );
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// 条件式 AND / OR
//
  final public void ConditionalExpression() throws ParseException {Token token;
    label_42:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_42;
      }
      jj_consume_token(MULTI_LINE_DELIMITER);
    }
    StringConcatenateExpression();
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL_AND:
      case BOOL_OR:{
        ;
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        break label_43;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL_OR:{
        token = jj_consume_token(BOOL_OR);
        StringConcatenateExpression();
ASTConditionalOr jjtn001 = new ASTConditionalOr(this, JJTCONDITIONALOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
jjtn001.symbol.position.copy( token );
            jjtn001.symbol.type  = TYPE_BOOL;
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case BOOL_AND:{
        token = jj_consume_token(BOOL_AND);
        StringConcatenateExpression();
ASTConditionalAnd jjtn002 = new ASTConditionalAnd(this, JJTCONDITIONALAND);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002,  2);
          jjtc002 = false;
applyToSymbol( token, jjtn002, TYPE_BOOL, SymbolType.Expression );
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//
// 連結(->連結後、文字列へ暗黙の型変換)
//
  final public void StringConcatenateExpression() throws ParseException {Token token;
    label_44:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_44;
      }
      jj_consume_token(MULTI_LINE_DELIMITER);
    }
    BitwiseExpression();
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_ADD:{
        ;
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        break label_45;
      }
      token = jj_consume_token(STRING_ADD);
      BitwiseExpression();
ASTStrAdd jjtn001 = new ASTStrAdd(this, JJTSTRADD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
applyToSymbol( token, jjtn001, TYPE_STRING, SymbolType.Expression );
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

//
// 論理積, 論理和
//
  final public void BitwiseExpression() throws ParseException {Token token;
    label_46:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_46;
      }
      jj_consume_token(MULTI_LINE_DELIMITER);
    }
    EqualityExpression();
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND:
      case BIT_OR:{
        ;
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        break label_47;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_OR:{
        token = jj_consume_token(BIT_OR);
        EqualityExpression();
ASTBitwiseOr jjtn001 = new ASTBitwiseOr(this, JJTBITWISEOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
applyToSymbol( token, jjtn001, TYPE_INT, SymbolType.Expression );
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case BIT_AND:{
        token = jj_consume_token(BIT_AND);
        EqualityExpression();
ASTBitwiseAnd jjtn002 = new ASTBitwiseAnd(this, JJTBITWISEAND);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002,  2);
          jjtc002 = false;
applyToSymbol( token, jjtn002, TYPE_INT, SymbolType.Expression );
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//
// 比較
//
  final public void EqualityExpression() throws ParseException {Token token;
    label_48:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_48;
      }
      jj_consume_token(MULTI_LINE_DELIMITER);
    }
    RelationalExpression();
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL_EQ:
      case BOOL_NE:{
        ;
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        break label_49;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL_EQ:{
        token = jj_consume_token(BOOL_EQ);
        RelationalExpression();
ASTEqual jjtn001 = new ASTEqual(this, JJTEQUAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
applyToSymbol( token, jjtn001, TYPE_BOOL, SymbolType.Expression );
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case BOOL_NE:{
        token = jj_consume_token(BOOL_NE);
        RelationalExpression();
ASTNotEqual jjtn002 = new ASTNotEqual(this, JJTNOTEQUAL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002,  2);
          jjtc002 = false;
applyToSymbol( token, jjtn002, TYPE_BOOL, SymbolType.Expression );
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//
// 比較（不等号）
//
  final public void RelationalExpression() throws ParseException {Token token;
    label_50:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_50;
      }
      jj_consume_token(MULTI_LINE_DELIMITER);
    }
    AdditiveExpression();
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL_GT:
      case BOOL_LT:
      case BOOL_GE:
      case BOOL_LE:{
        ;
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        break label_51;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL_LT:{
        token = jj_consume_token(BOOL_LT);
        AdditiveExpression();
ASTLT jjtn001 = new ASTLT(this, JJTLT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
applyToSymbol( token, jjtn001, TYPE_BOOL, SymbolType.Expression );
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case BOOL_GT:{
        token = jj_consume_token(BOOL_GT);
        AdditiveExpression();
ASTGT jjtn002 = new ASTGT(this, JJTGT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002,  2);
          jjtc002 = false;
applyToSymbol( token, jjtn002, TYPE_BOOL, SymbolType.Expression );
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      case BOOL_LE:{
        token = jj_consume_token(BOOL_LE);
        AdditiveExpression();
ASTLE jjtn003 = new ASTLE(this, JJTLE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003,  2);
          jjtc003 = false;
applyToSymbol( token, jjtn003, TYPE_BOOL, SymbolType.Expression );
        } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
        break;
        }
      case BOOL_GE:{
        token = jj_consume_token(BOOL_GE);
        AdditiveExpression();
ASTGE jjtn004 = new ASTGE(this, JJTGE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004,  2);
          jjtc004 = false;
applyToSymbol( token, jjtn004, TYPE_BOOL, SymbolType.Expression );
        } finally {
if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  2);
          }
        }
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//
// 加算
//
  final public void AdditiveExpression() throws ParseException {Token token;
    label_52:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_52;
      }
      jj_consume_token(MULTI_LINE_DELIMITER);
    }
    MultiplicativeExpression();
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        break label_53;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        token = jj_consume_token(PLUS);
        MultiplicativeExpression();
ASTAdd jjtn001 = new ASTAdd(this, JJTADD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
applyToSymbol( token, jjtn001, TYPE_INT, SymbolType.Expression );
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case MINUS:{
        token = jj_consume_token(MINUS);
        MultiplicativeExpression();
ASTSub jjtn002 = new ASTSub(this, JJTSUB);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002,  2);
          jjtc002 = false;
applyToSymbol( token, jjtn002, TYPE_INT, SymbolType.Expression );
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//
// 乗算
//
  final public void MultiplicativeExpression() throws ParseException {Token token;
    label_54:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_54;
      }
      jj_consume_token(MULTI_LINE_DELIMITER);
    }
    UnaryExpression();
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        break label_55;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        token = jj_consume_token(MUL);
        UnaryExpression();
ASTMul jjtn001 = new ASTMul(this, JJTMUL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
applyToSymbol( token, jjtn001, TYPE_INT, SymbolType.Expression );
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
        }
      case DIV:{
        token = jj_consume_token(DIV);
        UnaryExpression();
ASTDiv jjtn002 = new ASTDiv(this, JJTDIV);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002,  2);
          jjtc002 = false;
applyToSymbol( token, jjtn002, TYPE_INT, SymbolType.Expression );
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
        }
      case MOD:{
        token = jj_consume_token(MOD);
        UnaryExpression();
ASTMod jjtn003 = new ASTMod(this, JJTMOD);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003,  2);
          jjtc003 = false;
applyToSymbol( token, jjtn003, TYPE_INT, SymbolType.Expression );
        } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//
// 単項
//
  final public void UnaryExpression() throws ParseException {Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULTI_LINE_DELIMITER:
    case MINUS:{
      label_56:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_56;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI_LINE_DELIMITER:{
        jj_consume_token(MULTI_LINE_DELIMITER);
        UnaryExpression();
        break;
        }
      case MINUS:{
        token = jj_consume_token(MINUS);
        UnaryExpression();
ASTNeg jjtn001 = new ASTNeg(this, JJTNEG);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  1);
          jjtc001 = false;
applyToSymbol( token, jjtn001, TYPE_INT | TYPE_REAL, SymbolType.Expression );
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case BOOL_NOT:
    case BIT_NOT:{
      UnaryExpressionNot();
      break;
      }
    case VARIABLE_INT:
    case VARIABLE_INT_ARRAY:
    case VARIABLE_REAL:
    case VARIABLE_REAL_ARRAY:
    case VARIABLE_STRING:
    case VARIABLE_STRING_ARRAY:
    case LPAREN:
    case IDENTIFIER:{
      PrimaryExpression();
      break;
      }
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:{
      Literal();
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//
// 単項NOT
//
  final public void UnaryExpressionNot() throws ParseException {Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BIT_NOT:{
      token = jj_consume_token(BIT_NOT);
      UnaryExpression();
ASTNot jjtn001 = new ASTNot(this, JJTNOT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  1);
          jjtc001 = false;
applyToSymbol( token, jjtn001, TYPE_INT, SymbolType.Expression );
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
      }
      break;
      }
    case BOOL_NOT:{
      token = jj_consume_token(BOOL_NOT);
      UnaryExpression();
ASTLogicalNot jjtn002 = new ASTLogicalNot(this, JJTLOGICALNOT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002,  1);
          jjtc002 = false;
applyToSymbol( token, jjtn002, TYPE_INT, SymbolType.Expression );
      } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  1);
          }
      }
      break;
      }
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//
// その他演算子・式・コマンドコール・リテラル
//
  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE_INT:
    case VARIABLE_INT_ARRAY:
    case VARIABLE_REAL:
    case VARIABLE_REAL_ARRAY:
    case VARIABLE_STRING:
    case VARIABLE_STRING_ARRAY:
    case IDENTIFIER:{
      PrimaryPrefix();
      break;
      }
    case LPAREN:{
      try {
        jj_consume_token(LPAREN);
        label_57:
        while (true) {
          if (jj_2_17(2)) {
            ;
          } else {
            break label_57;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        Expression();
        label_58:
        while (true) {
          if (jj_2_18(2)) {
            ;
          } else {
            break label_58;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(RPAREN);
      } catch (ParseException e) {
errorSkipTo( e );
      }
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//
// コマンド / 変数参照
//
  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE_INT:
    case VARIABLE_INT_ARRAY:
    case VARIABLE_REAL:
    case VARIABLE_REAL_ARRAY:
    case VARIABLE_STRING:
    case VARIABLE_STRING_ARRAY:{
      RefVariable();
      break;
      }
    case IDENTIFIER:{
      CallCommand();
      label_59:
      while (true) {
        if (jj_2_19(2)) {
          ;
        } else {
          break label_59;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//
// リテラル
//
  final public void Literal() throws ParseException {/*@bgen(jjtree) Literal */
    ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        token = jj_consume_token(INTEGER_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
applyIntLiteral( token, jjtn000 );
        break;
        }
      case REAL_LITERAL:{
        token = jj_consume_token(REAL_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
applyRealLiteral( token, jjtn000 );
        break;
        }
      case STRING_LITERAL:{
        token = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
applyStringLiteral( token, jjtn000 );
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// 変数参照
//
  final public void RefVariable() throws ParseException {/*@bgen(jjtree) RefVariable */
    ASTRefVariable jjtn000 = new ASTRefVariable(this, JJTREFVARIABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      symbol = Variable();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ArrayIndex();
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol.setName( symbol.image );
        jjtn000.symbol.type       = Variable.getKSPTypeFromVariableName( symbol.image );
        jjtn000.symbol.position.copy( symbol );
        jjtn000.symbol.symbolType = SymbolDefinition.SymbolType.Variable;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// 配列の添字
//
  final public void ArrayIndex() throws ParseException {/*@bgen(jjtree) ArrayIndex */
  ASTArrayIndex jjtn000 = new ASTArrayIndex(this, JJTARRAYINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      Expression();
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// コマンド呼び出し
//
  final public void CallCommand() throws ParseException {/*@bgen(jjtree) CallCommand */
    ASTCallCommand jjtn000 = new ASTCallCommand(this, JJTCALLCOMMAND);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      symbol = jj_consume_token(IDENTIFIER);
jjtn000.symbol.setName( symbol.image );
            jjtn000.symbol.position.copy( symbol );
            jjtn000.symbol.symbolType = SymbolDefinition.SymbolType.Command;
      if (jj_2_20(2)) {
        CommandArguments(jjtn000);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// コマンド呼び出し時の引数
//
  final public void CommandArguments(ASTCallCommand cmd) throws ParseException {
    jj_consume_token(LPAREN);
    if (jj_2_21(2)) {
      CommandArgumentList(cmd);
    } else {
      ;
    }
    label_60:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_60;
      }
      jj_consume_token(MULTI_LINE_DELIMITER);
    }
    jj_consume_token(RPAREN);
  }

//
// コマンド引数リスト
//
  final public void CommandArgumentList(ASTCallCommand cmd) throws ParseException {/*@bgen(jjtree) CommandArgumentList */
  ASTCommandArgumentList jjtn000 = new ASTCommandArgumentList(this, JJTCOMMANDARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_61:
      while (true) {
        if (jj_2_23(2)) {
          ;
        } else {
          break label_61;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      Expression();
      label_62:
      while (true) {
        if (jj_2_24(2)) {
          ;
        } else {
          break label_62;
        }
        label_63:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[70] = jj_gen;
            break label_63;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(COMMA);
        Expression();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
SymbolDefinition.copy( cmd.symbol, jjtn000.symbol );
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_96()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(PREPROCESSOR_CODE_IF_NOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(15)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(STRING_ADD)) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_86()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(BOOL_NOT)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(PREPROCESSOR_CODE_IF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(15)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(BOOL_AND)) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(BIT_NOT)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  private boolean jj_3R_95()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(BOOL_OR)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_78()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_scan_token(PREPROCESSOR_RESET_COND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(15)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_75()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  private boolean jj_3R_131()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(PREPROCESSOR_SET_COND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(15)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(15)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(CALL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(15)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_65()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_131()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(15)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_125()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(BOOL_GE)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(POLYPHONIC)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_scan_token(BOOL_LE)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(BOOL_GT)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(15)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(BOOL_LT)) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(DECLARE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_116()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(BOOL_NE)) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(REAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_scan_token(BOOL_EQ)) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(15)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_109()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_122()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  private boolean jj_3R_150()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_3R_151()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public KSPParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[71];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x289000,0x289000,0x0,0x60000,0x60000,0x0,0x8000,0x8000,0x0,0x0,0x8000,0x8000,0x8000,0x8000,0x0,0x8000,0x8000,0x0,0x8000,0x8000,0xf9419000,0xf9409000,0xe0000000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x0,0x8000,0x800000,0x8000,0x8000,0x8000,0x8000,0x1000,0x2000000,0x8000,0x4000000,0x8000,0x8000,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8c80,0x0,0x0,0x0,0xc80,0x0,0x8000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xfc,0x0,0x0,0x28020000,0x80000000,0x0,0x8020000,0x20000,0x80000000,0x0,0x0,0x0,0x8000000,0x0,0x0,0x80000000,0x0,0x0,0x80000fd,0x80000fd,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000fc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x18000,0x4000000,0x1800000,0x1800000,0x3000,0x3000,0xf00,0xf00,0xc0000,0xc0000,0x700000,0x700000,0x80000,0xa0840fc,0x2004000,0x80000fc,0xfc,0x0,0x20000000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[24];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public KSPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public KSPParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KSPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public KSPParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KSPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public KSPParser(KSPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(KSPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 71; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 24; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
