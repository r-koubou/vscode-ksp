options
{
    DEBUG_PARSER        = false;
    DEBUG_TOKEN_MANAGER = false;
    STATIC              = false;
    UNICODE_INPUT       = true;
    JDK_VERSION         = "1.6";
    MULTI               = true;
    VISITOR             = true;
    NODE_USES_PARSER    = true;
    NODE_DEFAULT_VOID   = true;
    NODE_EXTENDS        = "net.rkoubou.kspparser.javacc.ASTKSPNode";
}

PARSER_BEGIN( KSPParser )

package net.rkoubou.kspparser.javacc.generated;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigInteger;

import net.rkoubou.kspparser.analyzer.AnalyzeErrorCounter;
import net.rkoubou.kspparser.analyzer.AnalyzerConstants;
import net.rkoubou.kspparser.analyzer.KSPLanguageLimitations;
import net.rkoubou.kspparser.analyzer.MessageManager;
import net.rkoubou.kspparser.analyzer.SymbolDefinition;
import net.rkoubou.kspparser.analyzer.SymbolDefinition.SymbolType;
import net.rkoubou.kspparser.analyzer.Variable;

public class KSPParser implements AnalyzerConstants
{
    /** ルートの構文木 */
    ASTRootNode rootNode;

    /** パース対象のファイル */
    File file;

    /** コールバック・ユーザー関数の行数オーバーフローのしきい値 */
    int lineOverflowLimit = Integer.MAX_VALUE - 1;

    /** パース中のコールバック・ユーザー関数の行数カウンタ */
    int currentScopeLineCounter = 0;

    /**
     * Ctor.
     */
    public KSPParser( File file ) throws IOException
    {
        this( new BufferedReader( new InputStreamReader( new FileInputStream( file ), "UTF-8" ) ) );
        this.file = file.getAbsoluteFile();
   }

    /**
     * パース対象ファイルのFileを取得する
     */
    public File getFile()
    {
        return file;
    }

    /**
     * 構文解析
     */
    public ASTRootNode analyzeSyntax() throws Exception
    {
        ASTRootNode rootNode = null;
        try
        {
            rootNode = KSPScript();
        }
        catch( Throwable e )
        {
            e.printStackTrace();
        }
        finally
        {
            // javacc が生成するトークン解析器が使用した入力ストリームのクローズ
            // 構文解析時に文法エラーがあった場合にクローズせずに抜けるっぽく
            // ファイルハンドルを掴みっ放しになってしまい他のアプリケーションからアクセスできなくなるので対処
            try{ jj_input_stream.inputStream.close(); } catch( Throwable e ){}
        }

        return rootNode;

    }

    /**
     * 指定された値をシンボル情報に設定
     */
    void applyToSymbol( Token token, SimpleNode dest, int type, SymbolDefinition.SymbolType symbolType )
    {
        if( token.image != null )
        {
            dest.symbol.setName( token.image );
        }
        dest.symbol.position.copy( token );
        dest.symbol.type        = type;
        dest.symbol.symbolType  = symbolType;
    }

    /**
     * リテラルをシンボル情報に設定
     */
    void applyIntLiteral( Token token, SimpleNode dest )
    {
        String v = token.image.toLowerCase();
        if( v.startsWith( "0" ) && v.endsWith( "h" ) )
        {
            // KSP 16進数 → Java 16進数
            // 0x80000000以上の値の扱いが特殊なので一迂回。
            // http://qiita.com/oboenikui/items/cfd396b08f20798f0b3e
            BigInteger bi = new BigInteger( v.substring( 1, v.length() - 1 ), 16 );
            dest.symbol.value = bi.intValue();
        }
        else
        {
            // 10進数
            // KSPは signed 32bit int
            BigInteger bi = new BigInteger( v );    // KONTAKTと同様に、何桁になっても最後は下位32bitに切り詰める
            dest.symbol.value = bi.intValue();
        }
        dest.symbol.type      = TYPE_INT;
        applyAllLiteral( token, dest );
    }

    /**
     * リテラルをシンボル情報に設定
     */
    void applyRealLiteral( Token token, SimpleNode dest )
    {
        dest.symbol.value = Double.valueOf( token.image );
        dest.symbol.type  = TYPE_REAL;
        applyAllLiteral( token, dest );
    }

    /**
     * リテラルをシンボル情報に設定
     */
    void applyStringLiteral( Token token, SimpleNode dest )
    {
        dest.symbol.value = token.image;
        dest.symbol.type  = TYPE_STRING;
        applyAllLiteral( token, dest );
    }

    /**
     * リテラルをシンボル情報に設定(型共通)
     */
    void applyAllLiteral( Token token, SimpleNode dest )
    {
        dest.jjtSetValue( dest.symbol.value );
        dest.symbol.setName( "" );
        dest.symbol.accessFlag   = ACCESS_ATTR_CONST;
        dest.symbol.position.copy( token );
        dest.symbol.symbolType   = SymbolDefinition.SymbolType.Literal;
    }

    /**
     * 構文解析中にエラーが出た場合の復帰先までトークンを読み飛ばす
     */
    void errorSkipTo( ParseException e )
    {
        MessageManager.println( e );
        AnalyzeErrorCounter.e();
        //e.printStackTrace();
        Token t = null;
        do
        {
            try
            {
                t = null; // getNextTokenコール時、例外発生時の無限ループ対策
                t = getNextToken();
            }
            catch( Throwable ee )
            {}
        }
        while( t != null &&
               t.kind != EOF &&
               t.kind != EOL &&
               t.kind != MULTI_LINE_DELIMITER &&
               t.kind != RPAREN &&
               t.kind != RBRACKET
        );
    }

}
PARSER_END( KSPParser )

//------------------------------------------------------------------------------
// Skip
//------------------------------------------------------------------------------
SKIP :
{
      " "
    | "\t"
    | "\f"
}

//------------------------------------------------------------------------------
// Comment
//------------------------------------------------------------------------------
MORE :
{
  "{" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "}" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

//------------------------------------------------------------------------------
// Literal
//------------------------------------------------------------------------------
TOKEN :
{
  <INTEGER_LITERAL :
    <DECIMAL_LITERAL> | <HEX_LITERAL> >
|
  <#DECIMAL_LITERAL: ( "0" ) | ( ["1"-"9"] (["0"-"9"])* ) >
|
  <#HEX_LITERAL: "0" (["0"-"9","a"-"f","A"-"F"])+ ["h","H"] >
}

TOKEN:
{
  <REAL_LITERAL: (["0"-"9"])+ "." (["0"-"9"])+ >
}

TOKEN:
{
  <STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

//------------------------------------------------------------------------------
// 改行・デリミタ
//------------------------------------------------------------------------------
TOKEN:
{
      <EOL: (<CR><LF>) | <LF> >
    | <#CR: "\r" >
    | <#LF: "\n" >
    | <MULTI_LINE_DELIMITER: "..." ([ " ", "\t" ])* <EOL> >
}

//------------------------------------------------------------------------------
// キーワード
//------------------------------------------------------------------------------
TOKEN:
{
    // 変数
      <DECLARE: "declare" >
    | <CONST: "const" >
    | <POLYPHONIC: "polyphonic">
    // コールバック
    | <ON: "on" >
    | <END: "end" >
    | <FUNCTION: "function" >
    // ステートメント
    | <IF: "if" >
    | <ELSE: "else" >
    | <SELECT: "select" >
    | <CASE: "case" >
    | <TO: "to" >
    | <WHILE: "while" >
    | <CALL: "call" >
}

//--------------------------------------------------------------------------
// プリプロセッサ
//--------------------------------------------------------------------------
TOKEN:
{
      <PREPROCESSOR_SET_COND: "SET_CONDITION" >
    | <PREPROCESSOR_RESET_COND: "RESET_CONDITION" >
    | <PREPROCESSOR_CODE_IF: "USE_CODE_IF" >
    | <PREPROCESSOR_CODE_IF_NOT: "USE_CODE_IF_NOT" >
    | <PREPROCESSOR_CODE_END_IF: "END_USE_CODE" >
}

//------------------------------------------------------------------------------
// 変数
//------------------------------------------------------------------------------
TOKEN:
{
      <VARIABLE_INT:            "$" <IDENTIFIER> >
    | <VARIABLE_INT_ARRAY:      "%" <IDENTIFIER> >
    | <VARIABLE_REAL:           "~" <IDENTIFIER> >
    | <VARIABLE_REAL_ARRAY:     "?" <IDENTIFIER> >
    | <VARIABLE_STRING:         "@" <IDENTIFIER> >
    | <VARIABLE_STRING_ARRAY:   "!" <IDENTIFIER> >
}

//------------------------------------------------------------------------------
// 演算子
//------------------------------------------------------------------------------
TOKEN:
{
    // 比較演算子
      <BOOL_GT: ">">
    | <BOOL_LT: "<">
    | <BOOL_GE: ">=">
    | <BOOL_LE: "<=">
    | <BOOL_EQ: "=">
    //TODO in_rangeはコマンドなので演算子扱いしない
    | <BOOL_NE: "#">
    | <BOOL_NOT: "not">
    | <BOOL_AND: "and">
    | <BOOL_OR: "or">
    // 算術演算子
    | <ASSIGN: ":=" >
    | <PLUS: "+" >
    | <MINUS: "-" >
    | <MUL: "*" >
    | <DIV: "/" >
    | <MOD: "mod" >
    | <BIT_AND: ".and." >
    | <BIT_OR: ".or." >
    | <BIT_NOT: ".not." >
    //TODO ビットシフトはコマンドなので演算子扱いしない
    // 文字列連結
    | <STRING_ADD: "&" >
}

//------------------------------------------------------------------------------
// その他
//------------------------------------------------------------------------------
TOKEN:
{
      <LPAREN: "(" >
    | <RPAREN: ")" >
    | <LBRACKET: "[" >
    | <RBRACKET: "]" >
    | <COMMA: "," >
}

//------------------------------------------------------------------------------
// 文法定義ここから
//------------------------------------------------------------------------------

//##############################################################################
// MEMO: Block(), Expression() 直前のトークンに (<MULTI_LINE_DELIMITER>)* 指定はいらない。
// 複数行に跨ぐ式を成立させるため、式中は演算子として定義している。
//##############################################################################

//
// プログラム全体
//
ASTRootNode KSPScript() #RootNode:
{}
{
    try
    {
        (
              CallbackDeclaration()
            | UserFunctionDeclaration()
            | <EOL>
            | <MULTI_LINE_DELIMITER>
        )*
    }
    catch( ParseException e )
    {
        errorSkipTo( e );
    }
    <EOF>
    {
        return jjtThis;
    }
}

//
// 変数の定義
//
Token Variable() :
{
    Token var;
}
{
    (
          var = <VARIABLE_INT>
        | var = <VARIABLE_INT_ARRAY>
        | var = <VARIABLE_REAL>
        | var = <VARIABLE_REAL_ARRAY>
        | var = <VARIABLE_STRING>
        | var = <VARIABLE_STRING_ARRAY>
    )
    {
        return var;
    }
}

//
// 変数宣言
//
void VariableDeclaration() #VariableDeclaration:
{
    Token name;
    Token symbol;
    Token uiType = null;
}
{
    (
        symbol = <DECLARE> (LOOKAHEAD(2) <MULTI_LINE_DELIMITER>)*
        (
              <CONST>                { jjtThis.symbol.accessFlag = ACCESS_ATTR_CONST; }
            | <POLYPHONIC>           { jjtThis.symbol.accessFlag = ACCESS_ATTR_POLY; }
            | uiType = <IDENTIFIER>  { jjtThis.symbol.accessFlag = ACCESS_ATTR_UI; } // ui_****
        )?

        ( LOOKAHEAD(2) <MULTI_LINE_DELIMITER> )*
        (
            name = Variable()
            [ LOOKAHEAD(2) VariableInitializer() ]
        )
        {
            jjtThis.symbol.setName( name.image );
            jjtThis.symbol.type = Variable.getKSPTypeFromVariableName( name.image );
        }
    )
    {
        if( uiType != null )
        {
            jjtThis.symbol.uiTypeName = uiType.image;
        }
        jjtThis.symbol.position.copy( symbol );
        jjtThis.symbol.symbolType = SymbolDefinition.SymbolType.Variable;
    }
}

//
// 初期値代入
//
void VariableInitializer() #VariableInitializer:
{}
{
      ArrayInitializer()
    | PrimitiveInititalizer()
}

//
// プリミティブ型変数初期値代入
//
void PrimitiveInititalizer() #PrimitiveInititalizer:
{
}
{
    (
        <ASSIGN> Expression()
    )
    {
        jjtThis.hasAssign = true;
    }
|
    (
        <LPAREN>
            Expression() ( (<MULTI_LINE_DELIMITER>)* <COMMA> Expression() )*
        <RPAREN>
    )
    {
        jjtThis.hasAssign = false;
    }
}

//
// 配列変数初期値代入
//
void ArrayInitializer() #ArrayInitializer:
{
    Token assign = null;
}
{
    ArrayIndex()
    (
        LOOKAHEAD(2) [ assign = <ASSIGN> ]
        <LPAREN>
            Expression() ( (<MULTI_LINE_DELIMITER>)* <COMMA> Expression() )*
        <RPAREN>
    )?
    {
        jjtThis.hasAssign = assign != null;
    }
}

//
// コールバック本体
//
void CallbackDeclaration() #CallbackDeclaration:
{
    Token symbol;
    Token end;
    this.currentScopeLineCounter = 0;
}
{
    (
        <ON> (<MULTI_LINE_DELIMITER>)* symbol = <IDENTIFIER> (<MULTI_LINE_DELIMITER>)*
        [ CallbackArgument() ]
        <EOL> { this.currentScopeLineCounter++; }
        Block()
        <END> (<MULTI_LINE_DELIMITER>)* end = <ON>
    )
    {
        jjtThis.symbol.setName( symbol.image );
        jjtThis.symbol.position.copy( symbol );
        jjtThis.symbol.position.endLine   = end.endLine;
        jjtThis.symbol.position.endColumn = end.endColumn;
        jjtThis.symbol.symbolType = SymbolDefinition.SymbolType.Callback;
        if( this.currentScopeLineCounter >= KSPLanguageLimitations.OVERFLOW_LINES )
        {
            MessageManager.println(
                MessageManager.PROPERTY_WARNING_TOOMUCH_LINECOUNT,
                MessageManager.Level.WARNING,
                jjtThis.symbol,
                String.valueOf( jjtThis.symbol.position.lineCount() )
            );
        }
    }
}

//
// コールバック・引数宣言
//
void CallbackArgument() :
{}
{
    <LPAREN> (<MULTI_LINE_DELIMITER>)*
    CallbackArgumentList()
    <RPAREN>
}

//
// コールバック・引数リスト
//
void CallbackArgumentList() #CallbackArgumentList:
{
    Token arg1, argN ;
}
{
    ( arg1 = Variable() )
    {
        jjtThis.args.add( arg1.image );
    }
    (
        ( <COMMA> argN = Variable() )
        {
            jjtThis.args.add( argN.image );
        }
    )*
}


//
// ユーザー定義関数本体
//
void UserFunctionDeclaration() #UserFunctionDeclaration:
{
    Token symbol;
    Token end;
    this.currentScopeLineCounter = 0;
}
{
    (
        <FUNCTION> (<MULTI_LINE_DELIMITER>)* symbol = <IDENTIFIER>
        <EOL> { this.currentScopeLineCounter++; }
        Block()
        <END> (<MULTI_LINE_DELIMITER>)* end = <FUNCTION>
    )
    {
        jjtThis.symbol.setName( symbol.image );
        jjtThis.symbol.position.copy( symbol );
        jjtThis.symbol.position.endLine   = end.endLine;
        jjtThis.symbol.position.endColumn = end.endColumn;
        jjtThis.symbol.symbolType = SymbolDefinition.SymbolType.UserFunction;
        if( this.currentScopeLineCounter >= KSPLanguageLimitations.OVERFLOW_LINES )
        {
            MessageManager.println(
                MessageManager.PROPERTY_WARNING_TOOMUCH_LINECOUNT,
                MessageManager.Level.WARNING,
                jjtThis.symbol,
                String.valueOf( jjtThis.symbol.position.lineCount() )
            );
        }
    }
}

//
// コールバック本体 / ユーザー定義関数本体のスコープ本体
//
void Block() #Block:
{}
{
    try
    {
        (
            LOOKAHEAD(2)
            BlockStatement()
        )*
    }
    catch( ParseException e )
    {
        errorSkipTo( e );
    }

}

//
// スコープ中の式
//
void BlockStatement() :
{}
{
      VariableDeclaration()
    | Statement()
}

//
// 各種ステートメントの定義
//
void Statement() :
{}
{
    try
    {
          PreProcessorStatement()
        | StatementExpression()
        | IfStatement()
        | SelectStatement()
        | WhileStatement()
        | CallUserFunctionStatement()
        | <MULTI_LINE_DELIMITER>
        | <EOL> { this.currentScopeLineCounter++; }
    }
    catch( ParseException e )
    {
        errorSkipTo( e );
    }
}

//
// プリプロセッサ
//
void PreProcessorStatement() :
{}
{
      PreProcessorDefine()        // SET_CONDITION(<condition-symbol>)
    | PreProcessorUnDefine()      // RESET_CONDITION(<condition-symbol>)
    | PreProcessorIfDefined()     // USE_CODE_IF(<condition-symbol>)
    | PreProcessorIfUnDefined()   // USE_CODE_IF_NOT(<condition-symbol>)
}

//
// プリプロセッサ：シンボル定義
//
void PreProcessorDefine() #PreProcessorDefine:
{
    Token symbol;
}
{
    // SET_CONDITION(<condition-symbol>)
    (
        <PREPROCESSOR_SET_COND> (<MULTI_LINE_DELIMITER>)*           // SET_CONDITION
        <LPAREN>                                                    // (
        (<MULTI_LINE_DELIMITER>)*
        symbol = <IDENTIFIER>                                       // SYMBOL
        (<MULTI_LINE_DELIMITER>)*
        <RPAREN>                                                    // )
    )
    {
        jjtThis.symbol.setName( symbol.image );
        jjtThis.symbol.position.copy( symbol );
        jjtThis.symbol.symbolType   = SymbolDefinition.SymbolType.PreprocessorSymbol;
    }
}

//
// プリプロセッサ：シンボル破棄
//
void PreProcessorUnDefine() #PreProcessorUnDefine:
{
    Token symbol;
}
{
    // RESET_CONDITION(<condition-symbol>)
    (
        <PREPROCESSOR_RESET_COND> (<MULTI_LINE_DELIMITER>)*         // RESET_CONDITION
        <LPAREN>                                                    // (
        (<MULTI_LINE_DELIMITER>)*
        symbol = <IDENTIFIER>                                       // SYMBOL
        (<MULTI_LINE_DELIMITER>)*
        <RPAREN>                                                    // )
    )
    {
        jjtThis.symbol.setName( symbol.image );
        jjtThis.symbol.position.copy( symbol );
        jjtThis.symbol.symbolType   = SymbolDefinition.SymbolType.PreprocessorSymbol;
    }
}

//
// プリプロセッサ：シンボル定義分岐(=ifdef)
//
void PreProcessorIfDefined() #PreProcessorIfDefined:
{
    Token symbol;
}
{
    // USE_CODE_IF(<condition-symbol>)
    (
        <PREPROCESSOR_CODE_IF> (<MULTI_LINE_DELIMITER>)*            // USE_CODE_IF
        <LPAREN>                                                    // (
        (<MULTI_LINE_DELIMITER>)*
        symbol = <IDENTIFIER>                                       // SYMBOL
        (<MULTI_LINE_DELIMITER>)*
        <RPAREN>                                                    // )
        Block()                                                     // code
        <PREPROCESSOR_CODE_END_IF>                                  // END_USE_CODE
    )
    {
        jjtThis.symbol.setName( symbol.image );
        jjtThis.symbol.position.copy( symbol );
        jjtThis.symbol.symbolType   = SymbolDefinition.SymbolType.PreprocessorSymbol;
    }
}

//
// プリプロセッサ：シンボル定義分岐(=ifndef)
//
void PreProcessorIfUnDefined() #PreProcessorIfUnDefined:
{
    Token symbol;
}
{
    // USE_CODE_IF_NOT(<condition-symbol>)
    (
        <PREPROCESSOR_CODE_IF_NOT> (<MULTI_LINE_DELIMITER>)*        // USE_CODE_IF_NOT
        <LPAREN>                                                    // (
        (<MULTI_LINE_DELIMITER>)*
        symbol = <IDENTIFIER>                                       // SYMBOL
        (<MULTI_LINE_DELIMITER>)*
        <RPAREN>                                                    // )
        Block()                                                     // code
        <PREPROCESSOR_CODE_END_IF>                                  // END_USE_CODE
    )
    {
        jjtThis.symbol.setName( symbol.image );
        jjtThis.symbol.position.copy( symbol );
        jjtThis.symbol.symbolType   = SymbolDefinition.SymbolType.PreprocessorSymbol;
    }
}

void StatementExpression() :
{}
{
      LOOKAHEAD(3) Assignment()
    | PrimaryExpression()
}

//
// if
//
void IfStatement() #IfStatement:
{}
{
    (
        <IF>         (<MULTI_LINE_DELIMITER>)*  // if
        <LPAREN>                                // (
        Expression()                            // cond
        <RPAREN>                                // )
        // <statement>+
        Block()
    )
    [
        // else
        //  <statement>+
        <ELSE>
        Block()
    ]
    <END> (<MULTI_LINE_DELIMITER>)* <IF>
}

//
// select
//
void SelectStatement() #SelectStatement:
{}
{
        <SELECT>   (<MULTI_LINE_DELIMITER>)*        // select
        <LPAREN>                                    // (
        Expression() (<MULTI_LINE_DELIMITER>)*      // cond
        <RPAREN>   (<MULTI_LINE_DELIMITER>)*        // )
        (<EOL>)+
        ( CaseStatement() )+                        // case xxx (to yyy)
        <END> (<MULTI_LINE_DELIMITER>)* <SELECT>    // end select
}

//
// case @select
//
void CaseStatement() #CaseStatement:
{}
{
    (
        <CASE> (LOOKAHEAD(2) <MULTI_LINE_DELIMITER>)*    // case
        CaseCondition()                                  // cond
        (
            <TO> (LOOKAHEAD(2) <MULTI_LINE_DELIMITER>)* CaseCondition() // e.g. -1000 to 1000
        )?
        Block()
        (<MULTI_LINE_DELIMITER>)*
    )
}

void CaseCondition() #CaseCondition:
{}
{
    Expression()
}

//
// while
//
void WhileStatement() #WhileStatement:
{}
{
    (
        <WHILE>      (<MULTI_LINE_DELIMITER>)*  // while
        <LPAREN>                                // (
        Expression()                            // cond
        <RPAREN>                                // )
        Block()                                 // <statement>+
    )
    <END> (<MULTI_LINE_DELIMITER>)* <WHILE>
}

//
// ユーザー定義関数呼び出し
//
void CallUserFunctionStatement() #CallUserFunctionStatement:
{
    Token symbol;
}
{
    <CALL> (<MULTI_LINE_DELIMITER>)* symbol = <IDENTIFIER>
    {
        jjtThis.symbol.setName( symbol.image );
        jjtThis.symbol.position.copy( symbol );
        jjtThis.symbol.symbolType = SymbolDefinition.SymbolType.UserFunction;
    }
}


//------------------------------------------------------------------------------
// 式
//------------------------------------------------------------------------------
void Expression():
{}
{
    ConditionalExpression()
}

//
// 代入式
//
void Assignment() #Assignment:
{
    Token token;
}
{
    RefVariable() token = <ASSIGN> Expression()
    {
        applyToSymbol( token, jjtThis, TYPE_VOID, SymbolType.Expression );
    }
}

//
// 条件式 AND / OR
//
void ConditionalExpression():
{
    Token token;
}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    StringConcatenateExpression()
    (
        token = <BOOL_OR> StringConcatenateExpression()
        {
            jjtThis.symbol.position.copy( token );
            jjtThis.symbol.type  = TYPE_BOOL;
        } #ConditionalOr(2)
|
        token = <BOOL_AND> StringConcatenateExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_BOOL, SymbolType.Expression );
        } #ConditionalAnd(2)
    )*
}

//
// 連結(->連結後、文字列へ暗黙の型変換)
//
void StringConcatenateExpression() :
{
    Token token;
}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    BitwiseExpression()
    (
        token = <STRING_ADD> BitwiseExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_STRING, SymbolType.Expression );
        } #StrAdd(2)
    )*
}

//
// 論理積, 論理和
//
void BitwiseExpression() :
{
    Token token;
}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    EqualityExpression()
    (
        token = <BIT_OR> EqualityExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT, SymbolType.Expression );
        } #BitwiseOr(2)
|
        token = <BIT_AND> EqualityExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT, SymbolType.Expression );
        } #BitwiseAnd(2)
    )*
}

//
// 比較
//
void EqualityExpression() :
{
    Token token;
}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    RelationalExpression()
    (
        token = <BOOL_EQ> RelationalExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_BOOL, SymbolType.Expression );
        } #Equal( 2 )
|
        token = <BOOL_NE> RelationalExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_BOOL, SymbolType.Expression );
        } #NotEqual( 2 )
    )*
}

//
// 比較（不等号）
//
void RelationalExpression() :
{
    Token token;
}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    AdditiveExpression()
    (
        token = <BOOL_LT> AdditiveExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_BOOL, SymbolType.Expression );
        } #LT(2)
|
       token = <BOOL_GT> AdditiveExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_BOOL, SymbolType.Expression );
        } #GT(2)
|
       token = <BOOL_LE> AdditiveExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_BOOL, SymbolType.Expression );
        } #LE(2)
|
       token = <BOOL_GE> AdditiveExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_BOOL, SymbolType.Expression );
        } #GE(2)
    )*
}

//
// 加算
//
void AdditiveExpression() :
{
    Token token;
}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    MultiplicativeExpression()
    (
        token = <PLUS> MultiplicativeExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT, SymbolType.Expression );
        } #Add(2)
|
        token = <MINUS> MultiplicativeExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT, SymbolType.Expression );
        } #Sub(2)
    )*
}

//
// 乗算
//
void MultiplicativeExpression() :
{
    Token token;
}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    UnaryExpression()
    (
        token = <MUL> UnaryExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT, SymbolType.Expression );
        } #Mul(2)
|
        token = <DIV> UnaryExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT, SymbolType.Expression );
        } #Div(2)
|
        token = <MOD> UnaryExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT, SymbolType.Expression );
        } #Mod(2)
    )*
}

//
// 単項
//
void UnaryExpression() :
{
    Token token;
}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    (
        <MULTI_LINE_DELIMITER>  UnaryExpression()
|
        token = <MINUS>         UnaryExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT | TYPE_REAL, SymbolType.Expression );
        } #Neg(1)
    )
|
    UnaryExpressionNot()
|
    PrimaryExpression()

|
    Literal()
}

//
// 単項NOT
//
void UnaryExpressionNot() :
{
    Token token;
}
{
    (
        token = <BIT_NOT> UnaryExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT, SymbolType.Expression );
        } #Not(1)
|
        token = <BOOL_NOT> UnaryExpression()
        {
            applyToSymbol( token, jjtThis, TYPE_INT, SymbolType.Expression );
        } #LogicalNot(1)
    )
}

//
// その他演算子・式・コマンドコール・リテラル
//
void PrimaryExpression() :
{}
{
    PrimaryPrefix()
|
    try
    {
        <LPAREN>
        (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
        Expression()
        (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
        <RPAREN>
    }
    catch( ParseException e )
    {
        errorSkipTo( e );
    }
}

//
// コマンド / 変数参照
//
void PrimaryPrefix() :
{}
{
      RefVariable()
    | CallCommand()

    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*

}

//
// リテラル
//
void Literal() #Literal :
{
    Token token;
}
{
    (
        token = <INTEGER_LITERAL>
        {
            applyIntLiteral( token, jjtThis );
        }
|
        token = <REAL_LITERAL>
        {
            applyRealLiteral( token, jjtThis );
        }
|       token = <STRING_LITERAL>
        {
            applyStringLiteral( token, jjtThis );
        }
    )
}

//
// 変数参照
//
void RefVariable() #RefVariable :
{
    Token symbol;
}
{
    (
        symbol = Variable() [ ArrayIndex() ]
    )
    {
        jjtThis.symbol.setName( symbol.image );
        jjtThis.symbol.type       = Variable.getKSPTypeFromVariableName( symbol.image );
        jjtThis.symbol.position.copy( symbol );
        jjtThis.symbol.symbolType = SymbolDefinition.SymbolType.Variable;
    }
}

//
// 配列の添字
//
void ArrayIndex() #ArrayIndex:
{}
{
    <LBRACKET> Expression() <RBRACKET>
}


//
// コマンド呼び出し
//
void CallCommand() #CallCommand:
{
    Token symbol;
}
{
    (
        symbol = <IDENTIFIER>
        {
            jjtThis.symbol.setName( symbol.image );
            jjtThis.symbol.position.copy( symbol );
            jjtThis.symbol.symbolType = SymbolDefinition.SymbolType.Command;
        }
        [ LOOKAHEAD(2) CommandArguments( jjtThis ) ]
    )
}

//
// コマンド呼び出し時の引数
//
void CommandArguments( ASTCallCommand cmd ) :
{}
{
    <LPAREN>
        [ LOOKAHEAD(2) CommandArgumentList( cmd ) ]
        ( LOOKAHEAD(2) <MULTI_LINE_DELIMITER> )*
    <RPAREN>
}

//
// コマンド引数リスト
//
void CommandArgumentList( ASTCallCommand cmd ) #CommandArgumentList:
{}
{
    ( LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    Expression()
    (
            LOOKAHEAD(2)( <MULTI_LINE_DELIMITER> )*
            <COMMA> Expression()
    )*
    {
        SymbolDefinition.copy( cmd.symbol, jjtThis.symbol );
    }
}

//------------------------------------------------------------------------------
// Identifier
//------------------------------------------------------------------------------
TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  // 頭文字
  < #LETTER:
      [
         "0"-"9",   // KSPの変数名は^[0-9]も許容するため
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06fa"-"\u06fc",
         "\u0710",
         "\u0712"-"\u072c",
         "\u0780"-"\u07a5",
         "\u0905"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17b3",
         "\u17db",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
|
  // 2文字目以降
  < #PART_LETTER:
      [
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}
