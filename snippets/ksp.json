{
    "region": {
        "prefix": "region",
        "body": [
            "{ #region }"
        ],
        "description": ""
    },
    "endregion": {
        "prefix": "endregion",
        "body": [
            "{ #endregion }"
        ],
        "description": ""
    },
    "int": {
        "prefix": "int",
        "body": [
            "declare $${1:name}"
        ],
        "description": "declare a user-defined variable to store a single integer value"
    },
    "inta": {
        "prefix": "int array",
        "body": [
            "declare %${1:name}[ ${2:size} ]"
        ],
        "description": "declare a user-defined array to store single integer values at specific indices"
    },
    "real": {
        "prefix": "real",
        "body": [
            "declare ~${1:name}"
        ],
        "description": "declare a user-defined variable to store a single real value"
    },
    "reala": {
        "prefix": "real array",
        "body": [
            "declare ?${1:name}[ ${2:size} ]"
        ],
        "description": "declare a user-defined array to store single real values at specific indices"
    },
    "string": {
        "prefix": "string",
        "body": [
            "declare @${1:name}"
        ],
        "description": "declare a user-defined string variable to store text"
    },
    "stringa": {
        "prefix": "string array",
        "body": [
            "declare !${1:name}[ ${2:size} ]"
        ],
        "description": "declare a user-defined string array to store text strings at specified indices"
    },
    "const": {
        "prefix": "const",
        "body": [
            "declare const $${1:name} := ${2:value}"
        ],
        "description": "declare a user-defined polyphonic variable to store a single integer value per note event"
    },
    "polyphonicv": {
        "prefix": "polyphonic",
        "body": [
            "declare polyphonic $${1:name}"
        ],
        "description": "declare a user-defined polyphonic variable to store a single integer value per note event"
    },
    "on async_complete": {
        "prefix": "on async_complete",
        "body": [
            "{ ${1:async complete callback, triggered after the execution of any load/save command} }",
            "on async_complete",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "async complete callback, triggered after the execution of any load/save command"
    },
    "on controller": {
        "prefix": "on controller",
        "body": [
            "{ ${1:MIDI controller callback, executed whenever a CC, pitch bend or channel pressure message is received} }",
            "on controller",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "MIDI controller callback, executed whenever a CC, pitch bend or channel pressure message is received"
    },
    "on init": {
        "prefix": "on init",
        "body": [
            "on init",
            "    make_perfview",
            "    message( \"\" )",
            "    set_script_title( \"title\" )",
            "end on"
        ],
        "description": "initialization callback, executed when the script was successfully analyzed"
    },
    "on listener": {
        "prefix": "on listener",
        "body": [
            "{ ${1:listener callback, executed at definable time intervals or whenever a transport command is received} }",
            "on listener",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "listener callback, executed at definable time intervals or whenever a transport command is received"
    },
    "on midi_in": {
        "prefix": "on midi_in",
        "body": [
            "{ ${1:midi callback, triggered by every incoming MIDI event} }",
            "on midi_in",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "Like ignore_event(), ignore_midi is a very \"strong\" command. Keep in mind that ignore_midi will ignore all incoming MIDI events. If you simply want to change the MIDI channel and/or any of the MIDI bytes, you can also use set_event_par()."
    },
    "on note": {
        "prefix": "on note",
        "body": [
            "{ ${1:note callback, executed whenever a note on message is received} }",
            "on note",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "note callback, executed whenever a note on message is received"
    },
    "on persistence_changed": {
        "prefix": "on persistence_changed",
        "body": [
            "{ ${1:executed after the init callback or whenever a snapshot has been loaded} }",
            "on persistence_changed",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "executed after the init callback or whenever a snapshot has been loaded"
    },
    "on pgs_changed": {
        "prefix": "on pgs_changed",
        "body": [
            "{ ${1:executed whenever any pgs_set_key_val() command is executed in any script} }",
            "on pgs_changed",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "executed whenever any pgs_set_key_val() command is executed in any script"
    },
    "on _pgs_changed": {
        "prefix": "on _pgs_changed",
        "body": [
            "{ ${1:executed whenever any pgs_set_key_val() command is executed in any script} }",
            "on _pgs_changed",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "executed whenever any pgs_set_key_val() command is executed in any script"
    },
    "on poly_at": {
        "prefix": "on poly_at",
        "body": [
            "{ ${1:polyphonic aftertouch callback, executed whenever a polyphonic aftertouch message is received} }",
            "on poly_at",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "polyphonic aftertouch callback, executed whenever a polyphonic aftertouch message is received"
    },
    "on release": {
        "prefix": "on release",
        "body": [
            "{ ${1:release callback, executed whenever a note off message is received} }",
            "on release",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "release callback, executed whenever a note off message is received"
    },
    "on rpn": {
        "prefix": "on rpn",
        "body": [
            "{ ${1:rpn(registered parameter number) callback message is received} }",
            "on rpn",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "rpn(registered parameter number) callback message is received"
    },
    "on nrpn": {
        "prefix": "on nrpn",
        "body": [
            "{ ${1:nrpn(unregistered parameter number) callback message is received} }",
            "on nrpn",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "nrpn(unregistered parameter number) callback message is received"
    },
    "on ui_control": {
        "prefix": "on ui_control",
        "body": [
            "{ ${1:UI callback, executed whenever the user changes the respective UI element} }",
            "on ui_control( $${2:uiVariable} )",
            "    ${3:{your code here\\}}",
            "end on"
        ],
        "description": "UI callback, executed whenever the user changes the respective UI element"
    },
    "on ui_update": {
        "prefix": "on ui_update",
        "body": [
            "{ ${1:UI update callback, executed with every GUI change in KONTAKT} }",
            "on ui_update",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "UI update callback, executed with every GUI change in KONTAKT"
    },
    "on ui_controls": {
        "prefix": "on ui_controls",
        "body": [
            "{ ${1:Global UI callback, executed whenever the user interacts with any particular UI widget.} }",
            "on ui_controls",
            "    ${2:{your code here\\}}",
            "end on"
        ],
        "description": "Global UI callback, executed whenever the user interacts with any particular UI widget."
    },
    "declare": {
        "prefix": "declare",
        "body": [
            "declare ${1:name}"
        ],
        "description": "declare a user-defined variable"
    },
    "ui_button": {
        "prefix": "ui_button",
        "body": [
            "declare ui_button $${1:variable-name}"
        ],
        "description": "create a user interface button"
    },
    "ui_knob": {
        "prefix": "ui_knob",
        "body": [
            "declare ui_knob $${1:variable-name}( ${2:min}, ${3:max}, ${4:display-ratio} )"
        ],
        "description": "create a user interface button"
    },
    "ui_file_selector": {
        "prefix": "ui_file_selector",
        "body": [
            "declare ui_file_selector $${1:variable-name}"
        ],
        "description": "create a user interface button"
    },
    "ui_label": {
        "prefix": "ui_label",
        "body": [
            "declare ui_label $${1:variable-name}( ${2:width}, ${3:height} )"
        ],
        "description": "create a user interface text label"
    },
    "ui_level_meter": {
        "prefix": "ui_level_meter",
        "body": [
            "declare ui_level_meter $${1:variable-name}"
        ],
        "description": "create a level meter"
    },
    "ui_menu": {
        "prefix": "ui_menu",
        "body": [
            "declare ui_menu $${1:variable-name}"
        ],
        "description": "create a user interface drop-down menu"
    },
    "ui_mouse_area": {
        "prefix": "ui_mouse_area",
        "body": [
            "declare ui_mouse_area $${1:variable-name}"
        ],
        "description": "create a user interface mouse area"
    },
    "ui_panel": {
        "prefix": "ui_panel",
        "body": [
            "declare ui_panel $${1:variable-name}"
        ],
        "description": "create a user interface panel"
    },
    "ui_slider": {
        "prefix": "ui_slider",
        "body": [
            "declare ui_slider $${1:variable-name}( ${2:min}, ${3:max} )"
        ],
        "description": "create a user interface slider"
    },
    "ui_switch": {
        "prefix": "ui_switch",
        "body": [
            "declare ui_switch $${1:variable-name}"
        ],
        "description": "create a user interface switch"
    },
    "ui_table": {
        "prefix": "ui_table",
        "body": [
            "declare ui_table %${1:array}[${2:colmns}]( ${3:width}, ${4:height}, ${5:range} )"
        ],
        "description": "create a user interface switch"
    },
    "ui_text_edit": {
        "prefix": "ui_text_edit",
        "body": [
            "declare ui_text_edit @${1:variable-name}"
        ],
        "description": "create a text edit field"
    },
    "ui_value_edit": {
        "prefix": "ui_value_edit",
        "body": [
            "declare ui_value_edit $${1:variable-name}( ${2:min}, ${3:max}, ${4:display-ratio} )"
        ],
        "description": "create a user interface number box"
    },
    "ui_waveform": {
        "prefix": "ui_waveform",
        "body": [
            "declare ui_waveform $${1:variable-name}( ${2:width}, ${3:height} )"
        ],
        "description": "create a waveform control to display zones and slices. Can also be used to control specific parameters per slice and for MIDI drag & drop functionality."
    },
    "ui_xy": {
        "prefix": "ui_xy",
        "body": [
            "declare ui_xy ?$${1:variable-name}[ ${2:num-of-elements} ]"
        ],
        "description": "create an XY pad"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if( ${1:condition} )",
            "    ${2:{your code here\\}}",
            "end if"
        ],
        "description": "if statement"
    },
    "ifelse": {
        "prefix": "ifelse",
        "body": [
            "if( ${1:condition} )",
            "    ${2:{your code here\\}}",
            "else",
            "    ${3:{your code here\\}}",
            "end if"
        ],
        "description": "if...else statement"
    },
    "select": {
        "prefix": "select",
        "body": [
            "select( ${1:variable} )",
            "    case ${2:case}",
            "        ${3:{your code here\\}}",
            "end select"
        ],
        "description": "if statement"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while( ${1:condition} )",
            "    ${2:{your code here\\}}",
            "end while"
        ],
        "description": "while statement"
    },
    "boolean_op_gt": {
        "prefix": ">=",
        "body": [
            "${1:x} >= ${2:y}"
        ],
        "description": "Boolean Operator: grater than or equal"
    },
    "boolean_op_lt": {
        "prefix": "<=",
        "body": [
            "${1:x} <= ${2:y}"
        ],
        "description": "Boolean Operator: less than or equal"
    },
    "boolean_op_eq": {
        "prefix": "=",
        "body": [
            "${1:x} = ${2:y}"
        ],
        "description": "Boolean Operator: equal"
    },
    "boolean_op_not_eq": {
        "prefix": "#",
        "body": [
            "${1:x} # ${2:y}"
        ],
        "description": "Boolean Operator: not equal"
    },
    "boolean_op_not": {
        "prefix": "not",
        "body": [
            "not ${1:x}"
        ],
        "description": "Boolean Operator: true if a is false and vice versa"
    },
    "boolean_op_and": {
        "prefix": "and",
        "body": [
            "${1:a} and ${2:b}"
        ],
        "description": "Boolean Operator: true if a is true and b is true"
    },
    "boolean_op_or": {
        "prefix": "or",
        "body": [
            "${1:a} or ${2:b}"
        ],
        "description": "Boolean Operator: true if a is true or b is true"
    }
}