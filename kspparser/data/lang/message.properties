# Encoding: utf-8

#
# [available variables]
#
# ${level}
# ${line}
# ${colmn}
# ${tokenLen}
# ${symbolname}  Using SynbolDefinition only
#

#-------------------------------------------------------------------------------
# Syntax Error
#-------------------------------------------------------------------------------
error.syntax = ${level}	${line}	Syntax Error

#-------------------------------------------------------------------------------
# General
#-------------------------------------------------------------------------------

# Prefix must use non-numeric character [0-9]
error.general.symbol.prefix.numeric = ${level}	${line}	${symbolname} : Prefix must use non-numeric character [0-9]

#-------------------------------------------------------------------------------
# Variable
#-------------------------------------------------------------------------------

# Declared variable outside "on init" callback
error.variable.declared.oninit = ${level}	${line}	${symbolname} : Declared variable outside "on init" callback

# Variable already declared
error.variable.already.declared = ${level}	${line}	${symbolname} : Variable already declared

# NI Reserved variable
error.variable.reserved = ${level}	${line}	${symbolname} : Reserved KSP internal variable

# NI Reserved prefix
error.variable.reserved.prefix = ${level}	${line}	${symbolname} : $NI_, $_CONTROL_PAR_, $EVENT_PAR_, $ENGINE_PAR_ reserved KONTAKT internal variable

# Unknown UI type (not registered to /data/uitypes.txt)
warning.variable.ui.unknown = ${level}	${line}	${symbolname} : Unknown UI type (Not listed at KSP Reference Manual)

#-------------------------------------------------------------------------------
# PreProcessor
#-------------------------------------------------------------------------------

# Unknown PreProcessor symbol defined
warning.preprocessor.unknown.defined = ${level}	${line}	${symbolname} : Unknown PreProcessor symbol

# PreProcessor symbol already declared
warning.preprocessor.already.defined = ${level}	${line}	${symbolname} : PreProcessor symbol already declared

#-------------------------------------------------------------------------------
# Callback
#-------------------------------------------------------------------------------

# Callback already declared
error.callback.already.declared = ${level}	${line}	${symbolname} : Callback already declared

# Unknown callback (== Callback is not registered to this parser(/data/callbacks.txt) )
warning.callback.unknown = ${level}	${line}	${symbolname} : Unknown callback (Not listed at KSP Reference Manual)

#-------------------------------------------------------------------------------
# Command
#-------------------------------------------------------------------------------

# Unknown command (== Undocumented by NI )
warning.command.unknown = ${level}	${line}	${symbolname} : Unknown command (Not listed at KSP Reference Manual)

#-------------------------------------------------------------------------------
# User Function
#-------------------------------------------------------------------------------

# User defined Functions is already declared
error.userfunction.already.declared = ${level}	${line}	${symbolname} : User defined Function already declared

# User defined Functions is not declared
error.userfunction.not.declared = ${level}	${line}	${symbolname} : User defined Function is not declared

#-------------------------------------------------------------------------------
# Semantic Analyzer
#-------------------------------------------------------------------------------

# Invalid expression
error.semantic.expression.invalid = ${level}	${line}	Invalid expression

# Variable not declared
error.semantic.variable.not.declared = ${level}	${line}	${symbolname} : Variable not declared

# Variable not initialized
warning.semantic.variable.init = ${level}	${line}	${symbolname} : Not initialized

# Not allowed call in callback
error.semantic.command.not.allowed = ${level}	${line}	${symbolname} : Not allowed call in this callback

# Unknown KSP Command
warning.semantic.command.unknown = ${level}	${line}	${symbolname} : Unknown KSP Command (Or Undocumented) If this is a PGS key-id, no problem.

# Unmatch arguments to command call
error.semantic.command.argcount = ${level}	${line}	${symbolname} : Unmatch argument(s) to command call

# Argument incompatible type
error.semantic.incompatible.arg = ${level}	${line}	${symbolname} : Argument(s) incompatible type

# Conditional Expression is not boolean
error.semantic.cond.boolean = ${level}	${line}	Conditional Expression is not boolean

# Binary Operator : Not compatible - left and right side expression
error.semantic.binopr.different = ${level}	${line}	Not compatible : left and right side expression

# Unknown KSP NI Variable
warning.semantic.variable.unknown = ${level}	${line}	It is a possibility that ${symbolname} is unknown KSP built-in variable (Or Undocumented)

# Variable declaration : Required initializer
error.semantic.variable.required.initializer = ${level}	${line}	${symbolname} is required initializer

# Variable declaration : Constant value(s) expected for variable initializer(s)
error.semantic.variable.noconstant.initializer = ${level}	${line}	${symbolname} : Constant value(s) expected for variable initializer(s)

# Variable declaration : Invalid initializer
error.semantic.variable.invalid.initializer = ${level}	${line}	${symbolname} : Invalid initializer

# Variable declaration : String type is not support initializer
error.semantic.variable.invalid.string.initializer = ${level}	${line}	${symbolname} : String type is not support initializer

# Variable declaration : Not compatible initializer type
error.semantic.variable.invalid.initializer.type = ${level}	${line}	${symbolname} : Not compatible type for initializer (Type: ${ext1}, Required: ${ext2})

# Variable declaration : String concatenation operator("&") cannot use in initializer
error.semantic.variable.invalid.initializer.stringadd = ${level}	${line}	String concatenation operator("&") cannot use in initializer

# Array variable declaration :  Variable is not array
error.semantic.variable.notarray = ${level}	${line}	${symbolname} is not array

# Array variable declaration :  Cannot declare as const
error.semantic.variable.declare.const = ${level}	${line}	${symbolname} cannot declare as const

# Array variable declaration :  Array size not declared
error.semantic.variable.not.arraysize = ${level}	${line}	${symbolname} : Array size not declared

# Array variable declaration :  Invalid array size
error.semantic.variable.invalid.arraysize = ${level}	${line}	${symbolname} : Invalid array size

# Array variable declaration :  Invalid array size
error.semantic.variable.invalid.maxarraysize = ${level}	${line}	${symbolname} : Array size cannot have more than ${ext1}

# Array variable declaration :  Invalid array element type
error.semantic.variable.invalid.arrayinitilizer = ${level}	${line}	${symbolname} : Array initializer : element[${ext1}] is not compatible type

# Array variable : Missing array subscript
error.semantic.variable.invalid.arraysubscript = ${level}	${line}	${symbolname} : Missing Subscript

# Array variable : Array Index Out of Bounds
error.semantic.variable.invalid.arrayoutofbounds = ${level}	${line}	${symbolname} : Array Index Out of Bounds (Array size: ${ext1}, Index: ${ext2})

# UI variable declaration : Not compatible type
error.semantic.variable.invalid.uitype = ${level}	${line}	${symbolname} : ${ext2} is required variable type : ${ext1}

# UI variable initializer : Argument count not compatible for UI initializer
error.semantic.variable.invalid.uiinitializer.count = ${level}	${line}	${symbolname} : Argument count not compatible for ${ext1} initializer (Argument count: ${ext2}, Required count: ${ext3})

# UI variable initializer : Not compatible type
error.semantic.variable.invalid.uiinitializer.type = ${level}	${line}	${symbolname} : Initializer is not compatible type (Argument index : ${ext1}, Required type : ${ext2})

# Variable assignment : Assigning to non variale
error.semantic.assign.notvariable = ${level}	${line}	It is not an assignment to a variable

# Variable assignment : Assigning to constant variale
error.semantic.assign.constvariable = ${level}	${line}	Cannot assign value (${symbolname} is constant)

# Variable assignment : Not compatible data type
error.semantic.assign.type.notcompatible = ${level}	${line}	":=" : not compatible type (${ext1} := ${ext2})

# Single operator "-" available numeric type only
error.semantic.single.operator.numonly = ${level}	${line}	Single operator available numerical types only

# Single operator "not" available in Conditional Statement only
error.semantic.single.operator.lnot = ${level}	${line}	Single operator "not" available in the Conditional Statement only

# String concatenating operator "&" : Conditional expression cannot concatenate with string operator
error.semantic.string.operator.conditional = ${level}	${line}	条件式は文字列演算子と連結できません

# To access Array element, integer type is available only
error.semantic.array.element.intonly = ${level}	${line}	To access Array element, integer type is available only

# case : A to B is same value
warning.semantic.casevalue = ${level}	${line}	"case ${ext1} to ${ext2}" : It is same value

# Case statement is available constant integer value only
error.semantic.casevalue.constonly = ${level}	${line}	"case" : Case statement is available constant integer value only

# Conditional statement : invalid condition
error.semantic.condition.invalid = ${level}	${line}	Conditional statement : invalid condition (Required: ${ext1})

# continue : Invalid call
error.semantic.continue.invalid = ${level}	${line}	continue : Invalid call (Only available in loop block)

#-------------------------------------------------------------------------------
# strict
#-------------------------------------------------------------------------------

# Unused user variable
warning.semantic.unuse.variable = ${level}	${line}	${symbolname} : Variable is not referenced in this script

# Unused user Function
warning.semantic.unuse.function = ${level}	${line}	${symbolname} : Function is not referenced in this script

# Callback / Function line count more than 5000 lines. ( If reached to 5000, KONTAKT parser stack will be overflow )
warning.toomuch.linecount = ${level}	${line}	Callback or User Function "${symbolname}" : Too much script lines. KONTAKT parser stack memory may overflow. now: ${ext1} lines.

# Variable name begin [0-9]
warning.semantic.info.varname = ${level}	${line}	${symbolname} : It is not generally recommended to use numeric characters in the first letter
